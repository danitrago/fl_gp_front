import React, { useRef, useState } from "react";
import { SubmitHandler, useForm } from "react-hook-form";
import withGropusForm from "../hoc/withGropusForm";
import { IFieldsData } from "../pages/Request";
import Button from "../ui-components/Button";
import GroupRecursos from "./GroupRecursos";

export interface IFormRecursos {
  crcf3_group_id_front: number;
  crcf3_guid_tipo_consultor: string;
  crcf3_guid_seniority: string;
  crcf3_cantidad_consultores: number;
  crcf3_porcentaje_dedicacion: number;
  crcf3_tiempo_requerido: number;
  crcf3_observaciones: string;
}

interface IFormRecursosProps {
  setSelectedStep: React.Dispatch<React.SetStateAction<string>>;
  setToSubmitData: React.Dispatch<React.SetStateAction<IFieldsData | null>>;
  demo: string;
}

const FormRecursos = (props: IFormRecursosProps) => {
  const [formGroup, setFormGroup] = useState([
    {
      id: Date.now(),
    },
  ]);
  let submitedForms = 0;

  const groupPanel = useRef<HTMLDivElement>(null);

  const submitAllGroups = () => {
    submitedForms = 0;
    const forms: any = groupPanel?.current?.getElementsByTagName("form");
    if (forms?.length) {
      [...forms].map((form) =>
        form.querySelector('input[type="submit"]').click()
      );
    }
  };

  const onSubmit: SubmitHandler<IFormRecursos> = (data) => {
    submitedForms++;
    props.setFormData((prev: IFieldsData | null) => {
      if (prev) {
        if (prev.recursos) {
          let filtered = prev.recursos?.filter(
            (group: IFormRecursos) =>
              group.crcf3_group_id_front !== data.crcf3_group_id_front
          );
          return { ...prev, recursos: [...filtered, data] };
        } else {
          return { ...prev, recursos: [data] };
        }
      } else {
        return { recursos: [data] };
      }
    });
    if (submitedForms === formGroup.length) {
      props.setSelectedStep("Requerimientos");
    }
  };

  const addGroup = () => {
    setFormGroup((prev) => {
      return [
        ...prev,
        {
          id: Date.now(),
        },
      ];
    });
  };

  const removeGroup = (id: number) => {
    setFormGroup((prev) => {
      return prev.filter((group) => group.id !== id);
    });
    props.setFormData((prev: IFieldsData | null) => {
      let filtered = prev?.recursos?.filter(
        (group: IFormRecursos) => group.crcf3_group_id_front != id
      );
      if (filtered) {
        return { ...prev, recursos: [...filtered] };
      } else {
        return prev;
      }
    });
  };

  return (
    <div ref={groupPanel}>
      <h3 className="text-lg font-bold">Recursos</h3>
      <span className="text-sm mb-5 block">
        Has seleccionado el tipo de solicitud (Recurso), por favor describe los
        detalles de el/los recursos.
      </span>
      {formGroup.map((group, index) => {
        return (
          <GroupRecursos
            key={group.id}
            group={group}
            index={index}
            unique={formGroup.length === 1}
            removeGroup={removeGroup}
            onSubmit={onSubmit}
          />
        );
      })}

      <a
        onClick={addGroup}
        className="text-green-500 mx-auto text-center block font-bold cursor-pointer hover:underline underline-offset-4 mb-5"
      >
        + Agregar grupo
      </a>

      <div className="w-full mt-3 pt-3 flex justify-between">
        <Button onClick={() => props.setSelectedStep("CaracterizaciÃ³n")}>
          Anterior
        </Button>
        <Button onClick={submitAllGroups}>Siguiente</Button>
      </div>
    </div>
  );
};

export default withGropusForm(FormRecursos);
